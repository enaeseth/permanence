#!/usr/bin/env python
# encoding: utf-8

from __future__ import with_statement
import sys
import os
import os.path

try:
    import permanence
except ImportError:
    root_dir = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
    sys.path.append(os.path.join(root_dir, "lib"))

from permanence.run import Recorder
from permanence.config import load_config, ConfigurationError
import logging
import signal
import threading
import traceback
import time

class Controller(object):
    __slots__ = ("config_filename", "logger", "recorder")
    
    def __init__(self, config_filename, logger):
        self.config_filename = config_filename
        self.logger = logger
        self.recorder = None
    
    def run(self):
        try:
            self.logger.debug("Loading configuration from %r." %
                self.config_filename)
            config = load_config(self.config_filename)
            self.recorder = Recorder(config)
            self._observe_events()
            self.recorder.start()
        except ConfigurationError, e:
            self.logger.error("Failed to load configuration: %s" % e)
    
    def reload_config(self):
        self.logger.debug("Reloading configuration.")
        try:
            config = load_config(self.config_filename)
            self.recorder.apply_configuration(config)
            self.logger.info("Reloaded configuration.")
        except Exception, e:
            self.logger.error("Failed to reload configuration: %s" % e)
    
    def shutdown(self):
        self.logger.info("Shutting down.")
        self.recorder.stop()
    
    def _observe_events(self):
        events = ("startup", "shutdown", "show_add", "show_update",
            "show_remove", "show_schedule", "show_start", "show_done",
            "show_error", "show_save", "hook_failure")
        
        for event in events:
            self.recorder.observe(event, getattr(self, "_%s" % event))
    
    def _startup(self):
        self.logger.info("Recorder has started running.")
    
    def _shutdown(self):
        self.logger.info("Recorder has shut down.")
    
    def _show_add(self, source, show):
        self.logger.debug("Added show %s on %s." % (show.name, source.name))
    
    def _show_update(self, source, show):
        self.logger.debug("Updated show %s on %s." % (show.name, source.name))
    
    def _show_remove(self, source, show):
        self.logger.debug("Removed show %s on %s." % (show.name, source.name))
    
    def _show_start(self, source, show):
        self.logger.info("Starting to record %s on %s." % (show.name,
            source.name))
    
    def _show_done(self, source, show, filename):
        self.logger.info("Finished recording %s from %s." %
            (show.name, source.name))
        self.logger.debug("Temporarily saved %s to %s." % (show.name,
            filename))
    
    def _show_error(self, source, show, error):
        self.logger.warning("Error recording %s from %s: %s" % (show.name,
            source.name, error))
    
    def _show_save(self, source, show, location):
        self.logger.info("Saved %s from %s to %s." % (show, source, location))
    
    def _show_schedule(self, source, show, start_time):
        start_time = time.strftime("%a %Y-%m-%d at %H:%M:%S",
            time.localtime(start_time))
        self.logger.debug("%s next scheduled to be recorded from %s on %s." %
            (show.name, source.name, start_time))
    
    def _hook_failure(self, description, error):
        self.logger.warning("Error running hook %s: %s" % (description, error))

def daemonize():
    # http://code.activestate.com/recipes/278731/
    # http://www.jejik.com/articles/2007/02/a_simple_unix_linux_daemon_in_python
    try:
        pid = os.fork()
        if pid > 0:
            # exit first parent
            os._exit(0)
    except OSError, e:
        print >>sys.stderr, "first fork failed: %s (%d)" % (e.strerror,
            e.errno)
        sys.exit(1)
    
    # decouple from the parent environment
    os.chdir('/')
    os.setsid()
    os.umask(0)
    
    try:
       pid = os.fork()
       if pid > 0:
           # exit first parent
           os._exit(0)
    except OSError, e:
        print >>sys.stderr, "second fork failed: %s (%d)" % (e.strerror,
            e.errno)
        sys.exit(1)
    
    return os.getpid()

if __name__ == '__main__':
    from optparse import OptionParser
    import logging.handlers
    
    parser = OptionParser(usage='%prog [options]')
    parser.add_option('-c', '--configuration', dest='config_file',
        metavar='FILENAME', help='configuration file')
    parser.add_option('-f', '--foreground', dest='foreground',
        action='store_true', help='run in foreground')
    parser.add_option('-l', '--log-dir', dest='log_dir',
        metavar='DIRECTORY', help='logging directory')
    parser.add_option('-p', '--pid-file', dest='pid_file',
        metavar='FILENAME', help='location to which the process ID will be '
        'written')
    parser.add_option('-v', '--verbose', dest='verbose', action='store_true',
        help="don't hold back on the logging front")
    
    base = os.path.dirname(os.path.dirname(os.path.abspath(sys.argv[0])))
    
    parser.set_defaults(foreground=False, verbose=False,
        config_file=os.path.join(base, 'etc', 'permanence.yaml'),
        log_dir=os.path.join(base, 'log'),
        pid_file=os.path.join(base, 'run', 'permanence.pid'))
    options, args = parser.parse_args()
    
    logger = logging.getLogger()
    formatter = logging.Formatter("[%(asctime)s] [%(levelname)s] %(message)s",
        "%Y-%m-%d %H:%M:%S")
    
    if options.foreground:
        handler = logging.StreamHandler()
        logger.setLevel(logging.DEBUG)
    else:
        log_file = os.path.join(options.log_dir, 'permanence.log')
        handler = logging.handlers.TimedRotatingFileHandler(log_file,
            'W0', 1, 10, 'UTF-8')
        if options.verbose:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)
    handler.setFormatter(formatter)
    logger.addHandler(handler)
    
    controller = Controller(options.config_file, logger)
    
    def shutdown(signum, frame):
        if options.foreground:
            print # move carat past the "^C"
        logger.debug("Caught signal %d." % signum)
        
        if not options.foreground:
            try:
                os.remove(options.pid_file)
            except OSError:
                pass # no worries
        controller.shutdown()
    
    def update(signum, frame):
        controller.reload_config()
    
    if options.foreground:
        signal.signal(signal.SIGINT, shutdown)
    else:
        signal.signal(signal.SIGHUP, update)
    signal.signal(signal.SIGTERM, shutdown)
    
    logger.info("Starting up.")
    logger.debug("Process ID is %d" % os.getpid())
    if not options.foreground:
        if os.path.exists(options.pid_file):
            logger.warn("PID file %s already exists!", options.pid_file)
        daemon_pid = daemonize()
        with open(options.pid_file, 'wt') as pid_file:
            print >>pid_file, daemon_pid
        logger.info("Forked; daemon running as process %d.", daemon_pid)
    
    try:
        controller.run()
    except Exception:
        traceback.print_exc()
        sys.exit(-1)
    